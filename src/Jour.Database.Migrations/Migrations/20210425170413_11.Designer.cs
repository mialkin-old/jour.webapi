// <auto-generated />
using System;
using Jour.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Jour.Database.Migrations.Migrations
{
    [DbContext(typeof(JourContext))]
    [Migration("20210425170413_11")]
    partial class _11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GoalTag", b =>
                {
                    b.Property<int>("GoalsGoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goals_goal_id");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_tag_id");

                    b.HasKey("GoalsGoalId", "TagsTagId")
                        .HasName("pk_goal_tag");

                    b.HasIndex("TagsTagId")
                        .HasDatabaseName("ix_goal_tag_tags_tag_id");

                    b.ToTable("goal_tag");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Birthday", b =>
                {
                    b.Property<int>("BirthdayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("birthday_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("BirthdayId")
                        .HasName("pk_birthdays");

                    b.ToTable("birthdays");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.HasKey("ExerciseId")
                        .HasName("pk_exercises");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_exercises_title");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_exercises_workout_id");

                    b.ToTable("exercises");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("goal_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("date")
                        .HasColumnName("created");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("GoalId")
                        .HasName("pk_goals");

                    b.ToTable("goals");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tag_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("TagId")
                        .HasName("pk_tags");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_title");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("todo_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completed_utc");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<int>("Hours")
                        .HasColumnType("integer")
                        .HasColumnName("hours");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("TodoId")
                        .HasName("pk_todos");

                    b.HasIndex("CompletedUtc")
                        .HasDatabaseName("ix_todos_completed_utc");

                    b.ToTable("todos");
                });

            modelBuilder.Entity("Jour.Database.Dtos.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workout_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("WorkoutDate")
                        .HasColumnType("date")
                        .HasColumnName("workout_date");

                    b.HasKey("WorkoutId")
                        .HasName("pk_workouts");

                    b.ToTable("workouts");
                });

            modelBuilder.Entity("TagTodo", b =>
                {
                    b.Property<int>("TagsTagId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_tag_id");

                    b.Property<int>("TodosTodoId")
                        .HasColumnType("integer")
                        .HasColumnName("todos_todo_id");

                    b.HasKey("TagsTagId", "TodosTodoId")
                        .HasName("pk_tag_todo");

                    b.HasIndex("TodosTodoId")
                        .HasDatabaseName("ix_tag_todo_todos_todo_id");

                    b.ToTable("tag_todo");
                });

            modelBuilder.Entity("GoalTag", b =>
                {
                    b.HasOne("Jour.Database.Dtos.Goal", null)
                        .WithMany()
                        .HasForeignKey("GoalsGoalId")
                        .HasConstraintName("fk_goal_tag_goals_goals_goal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jour.Database.Dtos.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .HasConstraintName("fk_goal_tag_tags_tags_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jour.Database.Dtos.Exercise", b =>
                {
                    b.HasOne("Jour.Database.Dtos.Workout", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .HasConstraintName("fk_exercises_workouts_workout_id");
                });

            modelBuilder.Entity("TagTodo", b =>
                {
                    b.HasOne("Jour.Database.Dtos.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .HasConstraintName("fk_tag_todo_tags_tags_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jour.Database.Dtos.Todo", null)
                        .WithMany()
                        .HasForeignKey("TodosTodoId")
                        .HasConstraintName("fk_tag_todo_todos_todos_todo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jour.Database.Dtos.Workout", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
